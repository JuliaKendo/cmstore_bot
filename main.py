import re
import logging
import config
import functools
import rollbar

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Filter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.utils.executor import start_polling, start_webhook
from aiogram.utils.exceptions import BadRequest
from contextlib import suppress
from environs import Env
from requests import HTTPError, ConnectionError

from cmstore_lib import (
    read_file,
    read_config,
    init_insta_bot,
    is_valid_insta_account,
    get_document_identifiers_from_service,
    update_users_full_name,
    update_users_phone,
    update_users_instagram
)
from custom_exceptions import (
    DocumentNotFound,
    NoActiveDrawFound,
    DocumentDoesNotMatch,
    UncorrectDocumentNumber,
    UncorrectUserFullName,
    UncorrectUserPhone,
    UncorrectUserInstagram,
    InvalidInstagramAccount,
    SmsApiError
)
from sms_api import handle_sms
from notify_rollbar import notify_rollbar
from error_handler import errors_handler

env = Env()
env.read_env()

logger = logging.getLogger('cmstore-bot')


class ConversationSteps(StatesGroup):
    waiting_for_check_number = State()
    waiting_for_user_name = State()
    waiting_for_phone_number = State()
    waiting_for_insta = State()


class UncorrectUserInput(Filter):

    def __init__(self, text) -> None:
        self.text = text
        super().__init__()

    async def check(self, message: types.Message):
        state = Dispatcher.get_current().current_state()
        current_state = await state.get_state()
        return not (message.text == self.text or current_state)


def handle_mistakes():
    def decorator(func):
        @functools.wraps(func)
        async def inner(*args, **kwargs):
            try:
                await func(*args, **kwargs)
            except (
                DocumentNotFound,
                NoActiveDrawFound,
                DocumentDoesNotMatch,
                UncorrectDocumentNumber,
                UncorrectUserFullName,
                UncorrectUserPhone,
                UncorrectUserInstagram,
                InvalidInstagramAccount
            ) as description:
                await args[0].answer(description)
            except SmsApiError as error:
                logger.error(f'–û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ sms: {error}')
                rollbar.report_exc_info()
            except (HTTPError, ConnectionError) as error:
                logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ http –∑–∞–ø—Ä–æ—Å–∞ –≤ 1–°: {error}')
                rollbar.report_exc_info()
        return inner
    return decorator


async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    ]
    await bot.set_my_commands(commands)


async def cmd_start(message: types.Message, state: FSMContext):
    await state.reset_state()
    with suppress(BadRequest):  # –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
        path_image = await read_config('startup_image')
        startup_photo = await read_file(path_image)
        await message.answer_photo(photo=startup_photo, reply_markup=types.ReplyKeyboardRemove())
    startup_text = await read_config('introduction_text')
    prepared_text = eval('"' + startup_text.replace('"', '') + '"')
    # –ò–Ω–æ–≥–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    # —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π "\\\\r\\\\n\\\\t", –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
    # –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for _ in range(0, 3):
        with suppress(SyntaxError):
            prepared_text = eval('"' + prepared_text.replace('"', '') + '"')
            continue
        break
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞']
    keyboard.add(*buttons)
    await message.answer(
        prepared_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=keyboard
    )


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.",
        reply_markup=types.ReplyKeyboardRemove()
    )


async def cmd_refuse(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–î–∞", callback_data="finish"),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="continue")
    ]
    keyboard.add(*buttons)
    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ?", reply_markup=keyboard)


async def cmd_uncorrect_user_input(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞']
    keyboard.add(*buttons)
    await message.answer(
        '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞"',
        reply_markup=keyboard
    )


async def show_answer(message, text):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è']
    keyboard.add(*buttons)
    await message.answer(
        text,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=keyboard
    )


async def cmd_check_number_input(message: types.Message):
    await ConversationSteps.waiting_for_check_number.set()


@handle_mistakes()
async def cmd_check_numbers_handle(message: types.Message, state: FSMContext):

    if not re.match(r'''^(\d{5})$''', message.text):
        raise UncorrectDocumentNumber
    document_ids = await get_document_identifiers_from_service(
        message.bot.data['1c_url'], message.text
    )
    await state.update_data(document=document_ids)
    await show_answer(message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§.–ò.–û.:')
    await ConversationSteps.next()


@handle_mistakes()
async def cmd_user_name_handle(message: types.Message, state: FSMContext):

    if not re.match(r'''([–ê-–Ø–Å][–∞-—è—ë]+[\-\s]?){3,}''', message.text):
        raise UncorrectUserFullName
    user_full_name = message.text.lower()
    user_data = await state.get_data()
    await update_users_full_name(
        message.bot.data['1c_url'], user_data['document'], user_full_name
    )
    await state.update_data(user_name=user_full_name)
    await show_answer(message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await ConversationSteps.next()


@handle_mistakes()
async def cmd_phone_number_handle(message: types.Message, state: FSMContext):

    if not re.match(r'''^([78]?9\d{9})$''', message.text):
        raise UncorrectUserPhone
    user_data = await state.get_data()
    await update_users_phone(
        message.bot.data['1c_url'], user_data['document'], message.text
    )
    await state.update_data(phone_number=message.text)
    await show_answer(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram:')
    await ConversationSteps.next()


@handle_mistakes()
@handle_sms()
async def cmd_instagram_handle(message: types.Message, state: FSMContext):

    if not re.match(r'''^@?[a-zA-Z0-9-_.]{5,16}''', message.text):
        raise UncorrectUserInstagram
    valid_insta_account = await is_valid_insta_account(
        message.text, message.bot.data['insta_bot']
    )
    if not valid_insta_account:
        raise InvalidInstagramAccount
    user_data = await state.get_data()
    participant_number = await update_users_instagram(
        message.bot.data['1c_url'], user_data['document'], message.text
    )
    await state.update_data(instagram=message.text)
    final_text = f'''
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –í—ã –≤ –∏–≥—Ä–µüòâ
–í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_number if participant_number else ""}
–ñ–¥—ë–º 29 –¥–µ–∫–∞–±—Ä—è –≤ 15:00 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://www.instagram.com/clinicmobile23/
'''
    await message.answer(
        final_text,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()
    return user_data, final_text


async def send_finish(call: types.CallbackQuery):
    state = Dispatcher.get_current().current_state()
    await state.finish()
    await call.message.answer(
        '–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await call.answer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!", show_alert=True)


async def send_continue(call: types.CallbackQuery):
    state = Dispatcher.get_current().current_state()
    current_state = await state.get_state()
    if current_state == 'ConversationSteps:waiting_for_user_name':
        await show_answer(call.message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§.–ò.–û.:')
    elif current_state == 'ConversationSteps:waiting_for_phone_number':
        await show_answer(call.message, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    elif current_state == 'ConversationSteps:waiting_for_insta':
        await show_answer(call.message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram:')
    else:
        await call.message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
    await call.answer()


def register_handlers_common(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.register_message_handler(cmd_start, commands=['start'], state='*')
    dp.register_message_handler(cmd_cancel, commands=['cancel', 'exit', 'stop', 'quit'], state='*')
    dp.register_message_handler(cmd_refuse, Text(equals="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è", ignore_case=True), state="*")
    dp.register_message_handler(cmd_uncorrect_user_input, UncorrectUserInput('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞'))

    # –®–∞–≥ 1. –í–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞
    dp.register_message_handler(cmd_check_number_input, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞', state='*')
    dp.register_message_handler(
        cmd_check_numbers_handle, state=ConversationSteps.waiting_for_check_number
    )
    # –®–∞–≥ 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.register_message_handler(
        cmd_user_name_handle, state=ConversationSteps.waiting_for_user_name
    )
    # –®–∞–≥ 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.register_message_handler(
        cmd_phone_number_handle, state=ConversationSteps.waiting_for_phone_number
    )
    # –®–∞–≥ 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º
    dp.register_message_handler(cmd_instagram_handle, state=ConversationSteps.waiting_for_insta)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–ª–±—ç–∫–æ–≤
    dp.register_callback_query_handler(send_finish, text="finish", state='*')
    dp.register_callback_query_handler(send_continue, text="continue", state='*')


async def on_shutdown(dispatcher: Dispatcher):
    logger.info('Shutdown.')
    bot = dispatcher.bot
    if bot.data['use_webhook']:
        await bot.delete_webhook()
    # Close Redis connection.
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


async def on_startup(dispatcher: Dispatcher):
    logger.info('Startup.')
    bot = dispatcher.bot
    if bot.data['use_webhook']:
        await bot.set_webhook(bot.data['webhook_url'])
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_commands(bot)


@notify_rollbar()
def main():

    logging.basicConfig(
        level='INFO',
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    )

    logger.info('Starting bot')

    storage = RedisStorage2(
        host=env.str('REDIS_HOST', 'localhost'),
        port=env.str('REDIS_PORT', '6379'),
        db='5'
    )

    bot = Bot(token=env.str('TG_BOT_TOKEN'))

    config.set_bot_variables(bot, env)

    bot.data['insta_bot'] = None
    with suppress(SystemExit):  # –õ–æ–≥–∏–∫–∞ —Ç–∞–∫–æ–≤–∞, —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–∏ –∏–Ω—Å—Ç–∞–±–æ—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∏–Ω—Å—Ç–µ
        bot.data['insta_bot'] = init_insta_bot(
            env.str('INSTA_LOGIN'), env.str('INSTA_PASSWORD')
        )

    dp = Dispatcher(bot, storage=storage)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    register_handlers_common(dp)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    dp.register_errors_handler(errors_handler)

    if bot.data['use_webhook']:
        start_webhook(
            dispatcher=dp,
            webhook_path='/webhook',
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=bot.data['webapp_host'],
            port=bot.data['webapp_port'],
        )
    else:
        start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)


if __name__ == "__main__":
    main()
